// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modeling2;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modeling2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Modeling2.Models.Branch", b =>
                {
                    b.Property<string>("Document")
                        .HasColumnType("text");

                    b.Property<string>("CustomerDocument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Document");

                    b.HasIndex("CustomerDocument");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Modeling2.Models.BranchProduct", b =>
                {
                    b.Property<string>("BranchDocument")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("WasSentToCatalog")
                        .HasColumnType("boolean");

                    b.HasKey("BranchDocument", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BranchProducts");
                });

            modelBuilder.Entity("Modeling2.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeCatalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeCustomer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerDocument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerDocument");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Modeling2.Models.Customer", b =>
                {
                    b.Property<string>("Document")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Document");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Modeling2.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerDocument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerDocument");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Modeling2.Models.Branch", b =>
                {
                    b.HasOne("Modeling2.Models.Customer", "Customer")
                        .WithMany("Branches")
                        .HasForeignKey("CustomerDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Modeling2.Models.BranchProduct", b =>
                {
                    b.HasOne("Modeling2.Models.Branch", "Branch")
                        .WithMany("BranchProducts")
                        .HasForeignKey("BranchDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modeling2.Models.Product", "Product")
                        .WithMany("BranchProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Modeling2.Models.Category", b =>
                {
                    b.HasOne("Modeling2.Models.Customer", "Customer")
                        .WithMany("Categories")
                        .HasForeignKey("CustomerDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Modeling2.Models.Product", b =>
                {
                    b.HasOne("Modeling2.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modeling2.Models.Customer", "Customer")
                        .WithMany("Products")
                        .HasForeignKey("CustomerDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Modeling2.Models.Branch", b =>
                {
                    b.Navigation("BranchProducts");
                });

            modelBuilder.Entity("Modeling2.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Modeling2.Models.Customer", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Modeling2.Models.Product", b =>
                {
                    b.Navigation("BranchProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
